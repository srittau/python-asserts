import datetime

from types import TracebackType
from typing import (
    Any,
    Callable,
    Container,
    ContextManager,
    Generic,
    Iterable,
    NoReturn,
    Optional,
    Pattern,
    Text,
    Tuple,
    Type,
    TypeVar,
    Union,
)

_E = TypeVar("_E", bound=BaseException)
_S = TypeVar("_S")

class AssertRaisesContext(Generic[_E]):
    exception: Type[_E]
    msg_fmt: Text
    def __init__(self, exception: Type[_E], msg_fmt: Text = ...) -> None: ...
    def __enter__(self: _S) -> _S: ...
    def __exit__(
        self, exc_type: Optional[Type[BaseException]], exc_val: Optional[BaseException], exc_tb: Optional[TracebackType]
    ) -> bool: ...
    def format_message(self, default_msg: Text) -> Text: ...
    def add_test(self, cb: Callable[[_E], Any]) -> None: ...
    @property
    def exc_val(self) -> _E: ...

class AssertRaisesErrnoContext(AssertRaisesContext[_E]):
    expected_errno: int
    def __init__(self, exception: Type[_E], expected_errno: int, msg_fmt: Text = ...) -> None: ...

class AssertRaisesRegexContext(AssertRaisesContext[_E]):
    pattern: Text
    def __init__(self, exception: Type[_E], pattern: Text, msg_fmt: Text = ...) -> None: ...

class AssertWarnsContext:
    def __init__(self, warning_class: Type[Warning], msg_fmt: Text = ...) -> None: ...
    def __enter__(self: _S) -> _S: ...
    def __exit__(
        self, exc_type: Optional[Type[BaseException]], exc_val: Optional[BaseException], exc_tb: Optional[TracebackType],
    ) -> None: ...
    def format_message(self) -> Text: ...
    def add_test(self, cb: Callable[[Warning], bool]) -> None: ...

class AssertWarnsRegexContext(AssertWarnsContext):
    pattern: Text
    def __init__(self, warning_class: Type[Warning], msg_fmt: Text = ...) -> None: ...

def fail(msg: Text = ...) -> NoReturn: ...
def assert_true(expr: Any, msg_fmt: Text = ...) -> None: ...
def assert_false(expr: Any, msg_fmt: Text = ...) -> None: ...
def assert_boolean_true(expr: Any, msg_fmt: Text = ...) -> None: ...
def assert_boolean_false(expr: Any, msg_fmt: Text = ...) -> None: ...
def assert_is_none(expr: Any, msg_fmt: Text = ...) -> None: ...
def assert_is_not_none(expr: Any, msg_fmt: Text = ...) -> None: ...
def assert_equal(first: Any, second: Any, msg_fmt: Text = ...) -> None: ...
def assert_not_equal(first: Any, second: Any, msg_fmt: Text = ...) -> None: ...
def assert_almost_equal(first: float, second: float, msg_fmt: Text = ..., places: int = ..., delta: float = ...) -> None: ...
def assert_not_almost_equal(first: float, second: float, msg_fmt: Text = ..., places: int = ..., delta: float = ...) -> None: ...
def assert_dict_equal(first: dict, second: dict, key_msg_fmt: Text = ..., value_msg_fmt: Text = ...) -> None: ...
def assert_dict_superset(first: dict, second: dict, key_msg_fmt: Text = ..., value_msg_fmt: Text = ...) -> None: ...
def assert_less(first: Any, second: Any, msg_fmt: Text = ...) -> None: ...
def assert_less_equal(first: Any, second: Any, msg_fmt: Text = ...) -> None: ...
def assert_greater(first: Any, second: Any, msg_fmt: Text = ...) -> None: ...
def assert_greater_equal(first: Any, second: Any, msg_fmt: Text = ...) -> None: ...
def assert_regex(text: Text, regex: Union[Text, Pattern[Text]], msg_fmt: Text = ...) -> None: ...
def assert_is(first: Any, second: Any, msg_fmt: Text = ...) -> None: ...
def assert_is_not(first: Any, second: Any, msg_fmt: Text = ...) -> None: ...
def assert_in(first: Any, second: Container[Any], msg_fmt: Text = ...) -> None: ...
def assert_not_in(first: Any, second: Container[Any], msg_fmt: Text = ...) -> None: ...
def assert_between(lower_bound: Any, upper_bound: Any, expr: Any, msg_fmt: Text = ...) -> None: ...
def assert_is_instance(obj: Any, cls: Union[type, Tuple[type, ...]], msg_fmt: Text = ...) -> None: ...
def assert_not_is_instance(obj: Any, cls: Union[type, Tuple[type, ...]], msg_fmt: Text = ...) -> None: ...
def assert_count_equal(sequence1: Iterable[Any], sequence2: Iterable[Any], msg_fmt: Text = ...) -> None: ...
def assert_has_attr(obj: Any, attribute: str, msg_fmt: Text = ...) -> None: ...
def assert_datetime_about_now(actual: Optional[datetime.datetime], msg_fmt: Text = ...) -> None: ...
def assert_datetime_about_now_utc(actual: Optional[datetime.datetime], msg_fmt: Text = ...) -> None: ...
def assert_raises(exception: Type[BaseException], msg_fmt: Text = ...) -> AssertRaisesContext: ...
def assert_raises_regex(
    exception: Type[BaseException], regex: Union[Text, Pattern[Text]], msg_fmt: Text = ...
) -> AssertRaisesContext: ...
def assert_raises_errno(exception: Type[BaseException], errno: int, msg_fmt: Text = ...) -> AssertRaisesContext: ...
def assert_succeeds(exception: Type[BaseException], msg_fmt: Text = ...) -> ContextManager: ...
def assert_warns(warning_type: Type[Warning], msg_fmt: Text = ...) -> AssertWarnsContext: ...
def assert_warns_regex(warning_type: Type[Warning], regex: Text, msg_fmt: Text = ...) -> AssertWarnsContext: ...
def assert_json_subset(first: Union[dict, list], second: Union[dict, list, str, bytes]) -> None: ...

class Exists:
    member_name: str
    def __init__(self, member_name: str) -> None: ...
