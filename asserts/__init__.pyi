import datetime

from typing import \
    Any, Container, List, Type, Callable, Tuple, Union, ContextManager, \
    Pattern, Optional, Iterable

class AssertRaisesContext:
    exception = ...  # type: Type[BaseException]
    msg_fmt = ...  # type: str
    def __init__(self, exception: Type[BaseException], msg_fmt: str = ...) -> None: ...
    def __enter__(self) -> AssertRaisesContext: ...
    def __exit__(self, exc_type: Type[BaseException], exc_val: BaseException, exc_tb: Any) -> None: ...
    def format_message(self, default_msg: str) -> str: ...
    def add_test(self, cb: Callable[[BaseException], None]) -> None: ...

class AssertRaisesErrnoContext(AssertRaisesContext):
    expected_errno = ...  # type: int
    def __init__(self, exception: Type[BaseException], expected_errno: int, msg_fmt: str = ...) -> None: ...

class AssertRaisesRegexContext(AssertRaisesContext):
    pattern = ...  # type: str
    def __init__(self, exception: Type[BaseException], pattern: str, msg_fmt: str = ...) -> None: ...

class AssertWarnsContext:
    def __init__(self, warning_class: Type[Warning], msg_fmt: str = ...) -> None: ...
    def __enter__(self) -> None: ...
    def __exit__(self, exc_type: Type[BaseException], exc_val: BaseException, exc_tb: Any) -> None: ...
    def format_message(self) -> str: ...
    def add_test(self, cb: Callable[[Warning], None]) -> None: ...

class AssertWarnsRegexContext(AssertWarnsContext):
    pattern = ...  # type: str
    def __init__(self, warning_class: Type[Warning], msg_fmt: str = ...) -> None: ...

def fail(msg: str = ...) -> None: ...
def assert_true(expr: Any, msg_fmt: str = ...) -> None: ...
def assert_false(expr: Any, msg_fmt: str = ...) -> None: ...
def assert_boolean_true(expr: Any, msg_fmt: str = ...) -> None: ...
def assert_boolean_false(expr: Any, msg_fmt: str = ...) -> None: ...
def assert_is_none(expr: Any, msg_fmt: str = ...) -> None: ...
def assert_is_not_none(expr: Any, msg_fmt: str = ...) -> None: ...
def assert_equal(first: Any, second: Any, msg_fmt: str = ...) -> None: ...
def assert_not_equal(first: Any, second: Any, msg_fmt: str = ...) -> None: ...
def assert_almost_equal(first: float, second: float, msg_fmt: str = ..., places: int = ..., delta: float = ...) -> None: ...
def assert_not_almost_equal(first: float, second: float, msg_fmt: str = ..., places: int = ..., delta: float = ...) -> None: ...
def assert_less(first: Any, second: Any, msg_fmt: str = ...) -> None: ...
def assert_less_equal(first: Any, second: Any, msg_fmt: str = ...) -> None: ...
def assert_greater(first: Any, second: Any, msg_fmt: str = ...) -> None: ...
def assert_greater_equal(first: Any, second: Any, msg_fmt: str = ...) -> None: ...
def assert_regex(text: str, regex: Union[str, Pattern[str]], msg_fmt: str = ...) -> None: ...
def assert_is(first: Any, second: Any, msg_fmt: str = ...) -> None: ...
def assert_is_not(first: Any, second: Any, msg_fmt: str = ...) -> None: ...
def assert_in(first: Any, second: Container[Any], msg_fmt: str = ...) -> None: ...
def assert_not_in(first: Any, second: Container[Any], msg_fmt: str = ...) -> None: ...
def assert_between(lower_bound: Any, upper_bound: Any, expr: Any, msg_fmt: str = ...) -> None: ...
def assert_is_instance(obj: Any, cls: Union[type, Tuple[type, ...]], msg_fmt: str = ...) -> None: ...
def assert_not_is_instance(obj: Any, cls: Union[type, Tuple[type, ...]], msg_fmt: str = ...) -> None: ...
def assert_count_equal(sequence1: Iterable[Any], sequence2: Iterable[Any], msg_fmt: str = ...) -> None: ...
def assert_has_attr(obj: Any, attribute: str, msg_fmt: str = ...) -> None: ...
def assert_datetime_about_now(actual: Optional[datetime.datetime], msg_fmt: str = ...) -> None: ...
def assert_datetime_about_now_utc(actual: Optional[datetime.datetime], msg_fmt: str = ...) -> None: ...
def assert_raises(exception: Type[BaseException], msg_fmt: str = ...) -> AssertRaisesContext: ...
def assert_raises_regex(exception: Type[BaseException], regex: Union[str, Pattern[str]], msg_fmt: str = ...) -> AssertRaisesContext: ...
def assert_raises_errno(exception: Type[BaseException], errno: int, msg_fmt: str = ...) -> AssertRaisesContext: ...
def assert_succeeds(exception: Type[BaseException], msg_fmt: str = ...) -> ContextManager: ...
def assert_warns(warning_type: Type[Warning], msg_fmt: str = ...) -> AssertWarnsContext: ...
def assert_warns_regex(warning_type: Type[Warning], regex: str, msg_fmt: str = ...) -> AssertWarnsContext: ...
